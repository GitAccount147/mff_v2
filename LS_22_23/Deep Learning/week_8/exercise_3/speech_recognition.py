#!/usr/bin/env python3
import argparse
import datetime
import os
import re
os.environ.setdefault("TF_CPP_MIN_LOG_LEVEL", "2")  # Report only TF errors by default

import numpy as np
import tensorflow as tf

from common_voice_cs import CommonVoiceCs

# Pat a Mat:
# 3d76595a-e687-11e9-9ce9-00505601122b
# 594215cf-e687-11e9-9ce9-00505601122b

# TODO: Define reasonable defaults and optionally more parameters.
# Also, you can set the number of threads to 0 to use all your CPU cores.
parser = argparse.ArgumentParser()
parser.add_argument("--batch_size", default=50, type=int, help="Batch size.")
parser.add_argument("--debug", default=True, action="store_true", help="If given, run functions eagerly.")
parser.add_argument("--epochs", default=5, type=int, help="Number of epochs.")
parser.add_argument("--seed", default=42, type=int, help="Random seed.")
parser.add_argument("--threads", default=0, type=int, help="Maximum number of threads to use.")

# our:
#parser.add_argument("--cle_dim", default=32, type=int, help="CLE embedding dimension.")  # 32
#parser.add_argument("--max_sentences", default=None, type=int, help="Maximum number of sentences to load.")  # None
parser.add_argument("--max_examples", default=None, type=int, help="Maximum number of examples to take.")
parser.add_argument("--rnn", default="GRU", choices=["LSTM", "GRU"], help="RNN layer type.")
parser.add_argument("--rnn_dim", default=128, type=int, help="RNN layer dimension.")  # 64
#parser.add_argument("--we_dim", default=64, type=int, help="Word embedding dimension.")  # 64
#parser.add_argument("--word_masking", default=0.1, type=float, help="Mask words with the given probability.")  # 0.0
parser.add_argument("--dropout", default=0.0, type=float, help="Dropout for rnn.")
parser.add_argument("--blank", default="minus_one", choices=["zero", "max", "minus_one"], help="Blank type.")


class Model(tf.keras.Model):
    def __init__(self, args: argparse.Namespace) -> None:
        inputs = tf.keras.layers.Input(shape=[None, CommonVoiceCs.MFCC_DIM], dtype=tf.float32, ragged=True)

        # TODO: Create a suitable model. You should:
        # - use a bidirectional RNN layer(s) to contextualize the input sequences.
        #
        # - optionally use suitable regularization
        #
        # - and finally generate logits for CTC loss/prediction as RaggedTensors.
        #   The logits should be generated by a dense layer with `1 + len(CommonVoiceCs.LETTERS)`
        #   outputs (the plus one is for the CTC blank symbol). Note that no
        #   activation should be used (the CTC operations will take care of it).
        #logits = ...

        #inp_shape = train.forms.word_mapping.vocabulary_size()
        #emb = tf.keras.layers.Embedding(input_dim=inp_shape, output_dim=args.we_dim)(ind)

        if args.rnn == "LSTM":
            rnn = tf.keras.layers.LSTM(units=args.rnn_dim, return_sequences=True, dropout=args.dropout)
        else:
            rnn = tf.keras.layers.GRU(units=args.rnn_dim, return_sequences=True, dropout=args.dropout)
        bid = tf.keras.layers.Bidirectional(layer=rnn, merge_mode='sum')
        hidden = bid(inputs)

        units = 1 + len(CommonVoiceCs.LETTERS)
        logits = tf.keras.layers.Dense(units=units)(hidden)


        super().__init__(inputs=inputs, outputs=logits)

        # We compile the model with the CTC loss and EditDistance metric.
        self.compile(#optimizer=...,  # why was this Ellipsis?
                     optimizer=tf.optimizers.Adam(jit_compile=False),
                     loss=self.ctc_loss,
                     metrics=[CommonVoiceCs.EditDistanceMetric()])

        self.tb_callback = tf.keras.callbacks.TensorBoard(args.logdir)

    def ctc_loss(self, gold_labels: tf.RaggedTensor, logits: tf.RaggedTensor) -> tf.Tensor:
        assert isinstance(gold_labels, tf.RaggedTensor), "Gold labels given to CTC loss must be RaggedTensors"
        assert isinstance(logits, tf.RaggedTensor), "Logits given to CTC loss must be RaggedTensors"

        # TODO: Use tf.nn.ctc_loss to compute the CTC loss.
        # - Convert the `gold_labels` to SparseTensor and pass `None` as `label_length`.
        # - Convert `logits` to a dense Tensor and then either transpose the
        #   logits to `[max_audio_length, batch, dim]` or set `logits_time_major=False`
        # - Use `logits.row_lengths()` method to obtain the `logit_length`
        # - Use the last class (the one with the highest index) as the `blank_index`.
        #
        # The `tf.nn.ctc_loss` returns a value for a single batch example, so average
        # them to produce a single value and return it.

        gold_sparse = gold_labels.to_sparse()
        gold_sparse = tf.cast(gold_sparse, dtype=tf.int32)
        logits_dense = logits.to_tensor()

        logit_len = logits.row_lengths()
        logit_len = tf.cast(logit_len, dtype=tf.int32)
        #blank_index = gold_labels[-1]
        #print(gold_labels.values)
        #blank_index = 0
        if args.blank == "zero":
            blank_index = 0
        elif args.blank == "max":
            blank_index = tf.cast(tf.math.reduce_max(gold_labels.values), dtype=tf.int32)
        elif args.blank == "minus_one":
            blank_index = -1
        else:
            blank_index = 0

        losses = tf.nn.ctc_loss(gold_sparse, logits_dense, label_length=None, logit_length=logit_len,
                                logits_time_major=False, blank_index=blank_index)
        loss = tf.reduce_mean(losses, axis=0)

        return loss
        #raise NotImplementedError()

    def ctc_decode(self, logits: tf.RaggedTensor) -> tf.RaggedTensor:
        assert isinstance(logits, tf.RaggedTensor), "Logits given to CTC predict must be RaggedTensors"

        # TODO: Run `tf.nn.ctc_greedy_decoder` or `tf.nn.ctc_beam_search_decoder`
        # to perform prediction.
        # - Convert the `logits` to a dense Tensor and then transpose them
        #   to shape `[max_audio_length, batch, dim]` using `tf.transpose`
        # - Use `logits.row_lengths()` method to obtain the `sequence_length`
        # - Convert the result of the decoded from a SparseTensor to a RaggedTensor
        #predictions = ...

        logits_dense = logits.to_tensor()
        logits_transposed = tf.transpose(logits_dense, perm=[1, 0, 2])

        seq_len = logits.row_lengths()
        seq_len = tf.cast(seq_len, dtype=tf.int32)
        ctc_dec = tf.nn.ctc_greedy_decoder(inputs=logits_transposed, sequence_length=seq_len)
        #print("\nctc_dec:", ctc_dec[0][0], ctc_dec[1], ctc_dec[0])

        #predictions = tf.RaggedTensor.from_tensor(tensor=ctc_dec[0], lengths=seq_len)
        predictions = tf.RaggedTensor.from_sparse(st_input=ctc_dec[0][0])

        assert isinstance(predictions, tf.RaggedTensor), "CTC predictions must be RaggedTensors"
        return predictions

    # We override the `train_step` method, because we do not want to
    # evaluate the training data for performance reasons
    def train_step(self, data):
        x, y = data
        with tf.GradientTape() as tape:
            y_pred = self(x, training=True)
            loss = self.compute_loss(x, y, y_pred)
        self.optimizer.minimize(loss, self.trainable_variables, tape=tape)
        return {"loss": metric.result() for metric in self.metrics if metric.name == "loss"}

    # We override `predict_step` to run CTC decoding during prediction.
    def predict_step(self, data):
        data = data[0] if isinstance(data, tuple) else data
        y_pred = self(data, training=False)
        y_pred = self.ctc_decode(y_pred)
        return y_pred

    # We override `test_step` to run CTC decoding during evaluation.
    def test_step(self, data):
        x, y = data
        y_pred = self(x, training=False)
        self.compute_loss(x, y, y_pred)
        y_pred = self.ctc_decode(y_pred)
        return self.compute_metrics(x, y, y_pred, None)


def main(args: argparse.Namespace) -> None:
    print(args)
    # Set the random seed and the number of threads.
    tf.keras.utils.set_random_seed(args.seed)
    tf.config.threading.set_inter_op_parallelism_threads(args.threads)
    tf.config.threading.set_intra_op_parallelism_threads(args.threads)
    if args.debug:
        tf.config.run_functions_eagerly(True)
        # tf.data.experimental.enable_debug_mode()

    # Create logdir name
    args.logdir = os.path.join("logs", "{}-{}-{}".format(
        os.path.basename(globals().get("__file__", "notebook")),
        datetime.datetime.now().strftime("%Y-%m-%d_%H%M%S"),
        ",".join(("{}={}".format(re.sub("(.)[^_]*_?", r"\1", k), v) for k, v in sorted(vars(args).items())))
    ))

    # Load the data.
    cvcs = CommonVoiceCs()

    # Create input data pipeline.
    def create_dataset(name):
        def prepare_example(example):
            # TODO: Create suitable batch examples.
            # - example["mfccs"] should be used as input
            # - the example["sentence"] is a UTF-8-encoded string with the target sentence
            #   - split it to unicode characters by using `tf.strings.unicode_split`
            #   - then pass it through the `cvcs.letters_mapping` layer to map
            #     the unicode characters to ids

            inp = example["mfccs"]
            chars = tf.strings.unicode_split(example["sentence"], input_encoding='UTF-8')
            ids = cvcs.letters_mapping(chars)
            return inp, ids
            #raise NotImplementedError()

        dataset = getattr(cvcs, name).map(prepare_example)
        dataset = dataset.shuffle(len(dataset), seed=args.seed) if name == "train" else dataset
        dataset = dataset.apply(tf.data.experimental.dense_to_ragged_batch(args.batch_size))
        dataset = dataset.prefetch(tf.data.AUTOTUNE)
        return dataset
    train, dev, test = create_dataset("train"), create_dataset("dev"), create_dataset("test")

    # TODO: Create the model and train it
    #model = ...
    if args.max_examples is not None:
        train = train.take(args.max_examples)
        dev = dev.take(args.max_examples)

    model = Model(args)
    logs = model.fit(train, epochs=args.epochs, validation_data=dev, callbacks=[model.tb_callback])

    # Generate test set annotations, but in `args.logdir` to allow parallel execution.
    os.makedirs(args.logdir, exist_ok=True)
    with open(os.path.join(args.logdir, "speech_recognition.txt"), "w", encoding="utf-8") as predictions_file:
        # TODO: Predict the CommonVoice sentences.
        #predictions = ...
        predictions = model.predict(test)

        for sentence in predictions:
            print("".join(CommonVoiceCs.LETTERS[char] for char in sentence), file=predictions_file)


if __name__ == "__main__":
    args = parser.parse_args([] if "__file__" not in globals() else None)
    main(args)
